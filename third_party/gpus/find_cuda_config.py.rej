--- third_party/gpus/find_cuda_config.py
+++ third_party/gpus/find_cuda_config.py
@@ -121,7 +121,7 @@ def _at_least_version(actual_version, required_version):
 def _get_header_version(path, name):
   """Returns preprocessor defines in C header file."""
   for line in io.open(path, "r", encoding="utf-8").readlines():
-    match = re.match("\s*#\s*define %s\s+(\d+)" % name, line)
+    match = re.match("\\s*#\\s*define %s\\s+(\\d+)" % name, line)
     if match:
       return match.group(1)
   return ""
@@ -260,7 +260,8 @@ def _find_cuda_config(base_paths, required_version):
   cuda_library_path = _find_library(base_paths, "cudart", cuda_version)
 
   def get_nvcc_version(path):
-    pattern = "Cuda compilation tools, release \d+\.\d+, V(\d+\.\d+\.\d+)"
+    # HACK FIXME
+    pattern = "Cuda compilation tools, release \\d+\\.\\d+, V(\\d+\\.\\d+\\.\\d+)"
     for line in subprocess.check_output([path, "--version"]).splitlines():
       match = re.match(pattern, line.decode("ascii"))
       if match:
@@ -549,7 +550,7 @@ def _get_legacy_path(env_name, default=[]):
   paths. Detect those and return '/usr', otherwise forward to _list_from_env().
   """
   if env_name in os.environ:
-    match = re.match("^(/[^/ ]*)+/lib/\w+-linux-gnu/?$", os.environ[env_name])
+    match = re.match("^(/[^/ ]*)+/lib/\\w+-linux-gnu/?$", os.environ[env_name])
     if match:
       return [match.group(1)]
   return _list_from_env(env_name, default)
